// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: login_session.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createLoginSession = `-- name: CreateLoginSession :one
INSERT INTO login_session (session_id, user_id, last_login, ip_addr, user_agent, expired_at, is_reset_session)
VALUES ($1, $2, $3, $4, $5, $6, FALSE)
RETURNING session_id, created_at, updated_at, user_id, last_login, ip_addr, user_agent, expired_at, is_reset_session
`

type CreateLoginSessionParams struct {
	SessionID string
	UserID    uuid.UUID
	LastLogin time.Time
	IpAddr    pqtype.Inet
	UserAgent sql.NullString
	ExpiredAt time.Time
}

func (q *Queries) CreateLoginSession(ctx context.Context, arg CreateLoginSessionParams) (LoginSession, error) {
	row := q.db.QueryRowContext(ctx, createLoginSession,
		arg.SessionID,
		arg.UserID,
		arg.LastLogin,
		arg.IpAddr,
		arg.UserAgent,
		arg.ExpiredAt,
	)
	var i LoginSession
	err := row.Scan(
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.LastLogin,
		&i.IpAddr,
		&i.UserAgent,
		&i.ExpiredAt,
		&i.IsResetSession,
	)
	return i, err
}

const createResetSession = `-- name: CreateResetSession :one
INSERT INTO login_session (session_id, user_id, last_login, ip_addr, user_agent, expired_at, is_reset_session)
VALUES ($1, $2, $3, $4, $5, $6, TRUE)
RETURNING session_id, created_at, updated_at, user_id, last_login, ip_addr, user_agent, expired_at, is_reset_session
`

type CreateResetSessionParams struct {
	SessionID string
	UserID    uuid.UUID
	LastLogin time.Time
	IpAddr    pqtype.Inet
	UserAgent sql.NullString
	ExpiredAt time.Time
}

func (q *Queries) CreateResetSession(ctx context.Context, arg CreateResetSessionParams) (LoginSession, error) {
	row := q.db.QueryRowContext(ctx, createResetSession,
		arg.SessionID,
		arg.UserID,
		arg.LastLogin,
		arg.IpAddr,
		arg.UserAgent,
		arg.ExpiredAt,
	)
	var i LoginSession
	err := row.Scan(
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.LastLogin,
		&i.IpAddr,
		&i.UserAgent,
		&i.ExpiredAt,
		&i.IsResetSession,
	)
	return i, err
}

const deleteExpiredSession = `-- name: DeleteExpiredSession :exec
DELETE FROM login_session WHERE expired_at < now()
`

func (q *Queries) DeleteExpiredSession(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSession)
	return err
}

const deleteSessionBySessionId = `-- name: DeleteSessionBySessionId :exec
DELETE FROM login_session WHERE session_id=$1
`

func (q *Queries) DeleteSessionBySessionId(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionBySessionId, sessionID)
	return err
}

const getSessionBySessionId = `-- name: GetSessionBySessionId :one
SELECT session_id, created_at, updated_at, user_id, last_login, ip_addr, user_agent, expired_at, is_reset_session FROM login_session WHERE session_id=$1 AND is_reset_session IS NOT TRUE
`

func (q *Queries) GetSessionBySessionId(ctx context.Context, sessionID string) (LoginSession, error) {
	row := q.db.QueryRowContext(ctx, getSessionBySessionId, sessionID)
	var i LoginSession
	err := row.Scan(
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.LastLogin,
		&i.IpAddr,
		&i.UserAgent,
		&i.ExpiredAt,
		&i.IsResetSession,
	)
	return i, err
}
