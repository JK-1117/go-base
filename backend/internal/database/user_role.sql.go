// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: user_role.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_role (user_id, role)
VALUES ($1, $2)
RETURNING user_id, role, created_at, updated_at
`

type CreateUserRoleParams struct {
	UserID uuid.UUID
	Role   RoleEnum
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, createUserRole, arg.UserID, arg.Role)
	var i UserRole
	err := row.Scan(
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserRoleByUser = `-- name: DeleteUserRoleByUser :exec
DELETE FROM user_role WHERE user_id=$1
`

func (q *Queries) DeleteUserRoleByUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserRoleByUser, userID)
	return err
}

const getUserRoleByUser = `-- name: GetUserRoleByUser :many
SELECT user_id, role, created_at, updated_at FROM user_role WHERE user_id=$1
`

func (q *Queries) GetUserRoleByUser(ctx context.Context, userID uuid.UUID) ([]UserRole, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoleByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
